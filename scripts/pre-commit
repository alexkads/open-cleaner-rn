#!/bin/bash

# Pre-commit hook para prevenir conflitos e ENFORÇAR NPM
# Instalar: cp scripts/pre-commit .git/hooks/ && chmod +x .git/hooks/pre-commit

set -e

echo "🔍 Verificando antes do commit..."

# 📦 VERIFICAR USO PADRONIZADO DE NPM
echo "📦 Verificando padronização npm..."

# Verificar se há pnpm-lock.yaml ou yarn.lock
if [ -f "pnpm-lock.yaml" ] || [ -f "yarn.lock" ]; then
    echo "❌ ERRO: Encontrados lockfiles de pnpm/yarn!"
    echo "📦 Este projeto usa EXCLUSIVAMENTE npm"
    echo "🔧 Execute: rm pnpm-lock.yaml yarn.lock && npm install"
    exit 1
fi

if [ -f "docs-astro/pnpm-lock.yaml" ] || [ -f "docs-astro/yarn.lock" ]; then
    echo "❌ ERRO: Encontrados lockfiles de pnpm/yarn em docs-astro!"
    echo "📦 Este projeto usa EXCLUSIVAMENTE npm"
    echo "🔧 Execute: cd docs-astro && rm pnpm-lock.yaml yarn.lock && npm install"
    exit 1
fi

# Verificar se há package-lock.json (deve ter)
if [ ! -f "package-lock.json" ]; then
    echo "❌ ERRO: package-lock.json não encontrado na raiz"
    echo "🔧 Execute: npm install"
    exit 1
fi

if [ ! -f "docs-astro/package-lock.json" ]; then
    echo "❌ ERRO: package-lock.json não encontrado em docs-astro"
    echo "🔧 Execute: cd docs-astro && npm install"
    exit 1
fi

# Verificar se há comandos pnpm/yarn em workflows
if grep -r "pnpm \|yarn " .github/workflows/ --exclude-dir=.git 2>/dev/null; then
    echo "❌ ERRO: Encontrados comandos pnpm/yarn em workflows!"
    echo "📦 Use apenas npm em CI/CD"
    echo "🔧 Substitua por comandos npm"
    exit 1
fi

echo "✅ Verificação npm OK - apenas npm sendo usado"

# Verificar se há conflitos não resolvidos
if grep -r "<<<<<<< HEAD" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=target; then
    echo "❌ Encontrados marcadores de conflito não resolvidos!"
    echo "🛠️  Resolva os conflitos antes de fazer commit"
    exit 1
fi

# Verificar formatação de arquivos importantes
echo "📝 Verificando formatação..."

# Verificar YAML syntax nos workflows
for file in .github/workflows/*.yml .github/workflows/*.yaml; do
    if [ -f "$file" ]; then
        if ! python -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
            echo "❌ Erro de sintaxe YAML em: $file"
            exit 1
        fi
    fi
done

# Verificar JSON syntax
for file in *.json src/**/*.json docs-astro/**/*.json; do
    if [ -f "$file" ]; then
        if ! python -c "import json; json.load(open('$file'))" 2>/dev/null; then
            echo "❌ Erro de sintaxe JSON em: $file"
            exit 1
        fi
    fi
done

echo "✅ Verificações OK - prosseguindo com commit"
