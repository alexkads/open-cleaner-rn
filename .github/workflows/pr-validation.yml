name: üîç Pull Request Validation

on:
  pull_request:
    branches: [ main, dev ]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  RUST_VERSION: '1.75.0'

jobs:
  # Job para validar informa√ß√µes b√°sicas do PR
  pr-validation:
    name: üìã PR Information Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: ‚úÖ Validate PR Title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          disallowScopes: |
            release
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      - name: üìù Check PR Description
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const body = pullRequest.body || '';
            const minLength = 50;
            
            if (body.length < minLength) {
              core.setFailed(`PR description is too short. Please provide a detailed description (minimum ${minLength} characters).`);
            }
            
            // Check for required sections
            const requiredSections = ['## üìã', '## üîó', '## üß™'];
            const missingSections = requiredSections.filter(section => !body.includes(section));
            
            if (missingSections.length > 0) {
              core.setFailed(`PR description is missing required sections: ${missingSections.join(', ')}`);
            }

      - name: üîó Check Linked Issues
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const body = pullRequest.body || '';
            const title = pullRequest.title || '';
            
            // Check for issue references
            const issuePattern = /(close[sd]?|fix(e[sd])?|resolve[sd]?)\s+#\d+/gi;
            const hasLinkedIssue = issuePattern.test(body) || issuePattern.test(title);
            
            if (!hasLinkedIssue && !body.includes('no-issue')) {
              core.notice('Consider linking this PR to an issue using "Fixes #123" or "Closes #123" in the description, or add "no-issue" if not applicable.');
            }

  # Job para testes automatizados
  automated-tests:
    name: üß™ Automated Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: ü¶Ä Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: üíæ Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Lint check
        run: npm run lint

      - name: üé® Format check
        run: npm run format:check

      - name: üèóÔ∏è Type check
        run: npm run type-check

      - name: üß™ Run tests
        run: npm run test:coverage

      - name: üìä Archive coverage reports
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/

      - name: ü¶Ä Rust tests
        working-directory: src-tauri
        run: cargo test

      - name: üèóÔ∏è Build check
        run: npm run build

  # Job para verifica√ß√£o de seguran√ßa
  security-check:
    name: üîí Security Check
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Audit npm dependencies
        run: npm audit --audit-level moderate || echo "Audit completed with warnings"

  # Job para verifica√ß√£o de performance
  performance-check:
    name: ‚ö° Performance Check
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build for production
        run: npm run build

      - name: üìä Bundle size analysis
        run: |
          echo "## üì¶ Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "Analyzing bundle size..." >> $GITHUB_STEP_SUMMARY
          du -sh dist/ >> $GITHUB_STEP_SUMMARY || echo "No dist folder found" >> $GITHUB_STEP_SUMMARY

  # Job para verifica√ß√£o de acessibilidade (se aplic√°vel)
  accessibility-check:
    name: ‚ôø Accessibility Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'ui') || contains(github.event.pull_request.labels.*.name, 'frontend')
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build application
        run: npm run build

      - name: ‚ôø Run accessibility tests
        run: |
          echo "Running accessibility checks..."
          # Adicione aqui seus testes de acessibilidade
          # Por exemplo: axe-core, lighthouse, etc.

  # Job de resumo final
  pr-check-summary:
    name: ‚úÖ PR Validation Summary
    runs-on: ubuntu-latest
    needs: [pr-validation, automated-tests, security-check, performance-check]
    if: always()
    steps:
      - name: üìä Generate summary
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = [
              { name: 'PR Validation', result: '${{ needs.pr-validation.result }}' },
              { name: 'Automated Tests', result: '${{ needs.automated-tests.result }}' },
              { name: 'Security Check', result: '${{ needs.security-check.result }}' },
              { name: 'Performance Check', result: '${{ needs.performance-check.result }}' }
            ];
            
            let summary = '## üîç Pull Request Validation Summary\n\n';
            
            for (const job of jobs) {
              const icon = job.result === 'success' ? '‚úÖ' : 
                          job.result === 'failure' ? '‚ùå' : 
                          job.result === 'cancelled' ? 'üö´' : '‚è≠Ô∏è';
              summary += `${icon} **${job.name}**: ${job.result}\n`;
            }
            
            const allPassed = jobs.every(job => job.result === 'success');
            
            if (allPassed) {
              summary += '\nüéâ **All checks passed!** This PR is ready for review.';
            } else {
              summary += '\n‚ö†Ô∏è **Some checks failed.** Please review and fix the issues above.';
            }
            
            core.summary.addRaw(summary);
            await core.summary.write();

      - name: üéØ Check overall status
        if: needs.pr-validation.result == 'failure' || needs.automated-tests.result == 'failure' || needs.security-check.result == 'failure'
        run: |
          echo "‚ùå Some required checks failed. Please fix the issues before merging."
          exit 1
